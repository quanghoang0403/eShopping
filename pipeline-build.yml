variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.TestProjects
  value: '**/*[Tt]ests/*.csproj'
- name: InfrastructureProjectPath
  value: back-end/eShopping.Infrastructure/eShopping.Infrastructure.csproj
- name: WebApiProjectPath
  value: back-end/eShopping.WebApi/eShopping.WebApi.csproj
- name: DbContext
  value: eShoppingDbContext
- name: VmName
  value: windows-latest

name: $(date:yyyyMMdd)$(rev:.r)
 
stages:

# - stage: Stage_DB
#   displayName: Build DB
#   jobs:
#   - job: Job_1
#     displayName: Build DB
#     pool:
#       vmImage: $(VmName)
#     steps:
#     - checkout: self
#       fetchDepth: 1
#     - task: UseDotNet@2
#       displayName: 'Install .NET Core 7.0 SDK'
#       inputs:
#         version: 7.0.x
#     - task: pekspro.pekspro-efcore-migration-script-generator.efcore-migration-script-generator.efcore-migration-script-generator-task@1
#       displayName: Generate Migration Scripts
#       inputs:
#         projectpath: $(InfrastructureProjectPath)
#         databasecontexts: $(DbContext)
#         startupprojectpath: $(WebApiProjectPath)
#         targetfolder: $(build.artifactstagingdirectory)
#         eftoolversion: '7'
#         installdependencies: true
#     - task: PublishBuildArtifacts@1
#       displayName: Publish Artifact
- stage: Stage_API
  displayName: Build API
  dependsOn: []
  jobs:
  - job: Job_1
    displayName: Build API
    pool:
      vmImage: $(VmName)
    steps:
    - checkout: self
      fetchDepth: 1
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: $(BuildParameters.TestProjects)
        arguments: --configuration $(BuildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
